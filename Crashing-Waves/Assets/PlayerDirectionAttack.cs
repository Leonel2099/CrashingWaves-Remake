//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerDirectionAttack: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerDirectionAttack()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""AttackPlayer"",
            ""id"": ""b420d0f3-87ff-45d5-ba33-cbba17515fff"",
            ""actions"": [
                {
                    ""name"": ""DirectionAttackUp"",
                    ""type"": ""Button"",
                    ""id"": ""c0c48c11-6fbd-4934-8e02-783a273a4036"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirectionAttackDown"",
                    ""type"": ""Button"",
                    ""id"": ""54e55067-7723-4b8f-a75e-667fb4850f0a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirectionAttackLeft"",
                    ""type"": ""Button"",
                    ""id"": ""bd7ad9ea-c72e-4419-a79e-77cf52967b02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DirectionAttackRight"",
                    ""type"": ""Button"",
                    ""id"": ""e3438be9-5885-4595-b3f7-58970b395540"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpecialAttack"",
                    ""type"": ""Button"",
                    ""id"": ""c3face33-294d-488f-a2ef-b68fc8d1cdae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10849db2-3cbd-4183-ac1a-7b2dc3c88406"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f516e8c1-bccb-43d4-9821-518458bd85d4"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3730c11e-cf66-4f9c-a2f7-50bb38e95e95"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d4d676e-a0d6-48d5-a280-40255118bb4a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2307ae4-a076-46e6-964a-af9c912a6467"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7427b3ba-6fbe-43d6-8c1c-a766da97f077"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fe5042d-0edd-4010-a785-bd063a550a00"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4c17807-c30c-4921-bc6a-b8c9930c551c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""DirectionAttackRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49197421-69b3-4d18-b6f1-20bda898fdb2"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""SpecialAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": []
        }
    ]
}");
        // AttackPlayer
        m_AttackPlayer = asset.FindActionMap("AttackPlayer", throwIfNotFound: true);
        m_AttackPlayer_DirectionAttackUp = m_AttackPlayer.FindAction("DirectionAttackUp", throwIfNotFound: true);
        m_AttackPlayer_DirectionAttackDown = m_AttackPlayer.FindAction("DirectionAttackDown", throwIfNotFound: true);
        m_AttackPlayer_DirectionAttackLeft = m_AttackPlayer.FindAction("DirectionAttackLeft", throwIfNotFound: true);
        m_AttackPlayer_DirectionAttackRight = m_AttackPlayer.FindAction("DirectionAttackRight", throwIfNotFound: true);
        m_AttackPlayer_SpecialAttack = m_AttackPlayer.FindAction("SpecialAttack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AttackPlayer
    private readonly InputActionMap m_AttackPlayer;
    private List<IAttackPlayerActions> m_AttackPlayerActionsCallbackInterfaces = new List<IAttackPlayerActions>();
    private readonly InputAction m_AttackPlayer_DirectionAttackUp;
    private readonly InputAction m_AttackPlayer_DirectionAttackDown;
    private readonly InputAction m_AttackPlayer_DirectionAttackLeft;
    private readonly InputAction m_AttackPlayer_DirectionAttackRight;
    private readonly InputAction m_AttackPlayer_SpecialAttack;
    public struct AttackPlayerActions
    {
        private @PlayerDirectionAttack m_Wrapper;
        public AttackPlayerActions(@PlayerDirectionAttack wrapper) { m_Wrapper = wrapper; }
        public InputAction @DirectionAttackUp => m_Wrapper.m_AttackPlayer_DirectionAttackUp;
        public InputAction @DirectionAttackDown => m_Wrapper.m_AttackPlayer_DirectionAttackDown;
        public InputAction @DirectionAttackLeft => m_Wrapper.m_AttackPlayer_DirectionAttackLeft;
        public InputAction @DirectionAttackRight => m_Wrapper.m_AttackPlayer_DirectionAttackRight;
        public InputAction @SpecialAttack => m_Wrapper.m_AttackPlayer_SpecialAttack;
        public InputActionMap Get() { return m_Wrapper.m_AttackPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IAttackPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackPlayerActionsCallbackInterfaces.Add(instance);
            @DirectionAttackUp.started += instance.OnDirectionAttackUp;
            @DirectionAttackUp.performed += instance.OnDirectionAttackUp;
            @DirectionAttackUp.canceled += instance.OnDirectionAttackUp;
            @DirectionAttackDown.started += instance.OnDirectionAttackDown;
            @DirectionAttackDown.performed += instance.OnDirectionAttackDown;
            @DirectionAttackDown.canceled += instance.OnDirectionAttackDown;
            @DirectionAttackLeft.started += instance.OnDirectionAttackLeft;
            @DirectionAttackLeft.performed += instance.OnDirectionAttackLeft;
            @DirectionAttackLeft.canceled += instance.OnDirectionAttackLeft;
            @DirectionAttackRight.started += instance.OnDirectionAttackRight;
            @DirectionAttackRight.performed += instance.OnDirectionAttackRight;
            @DirectionAttackRight.canceled += instance.OnDirectionAttackRight;
            @SpecialAttack.started += instance.OnSpecialAttack;
            @SpecialAttack.performed += instance.OnSpecialAttack;
            @SpecialAttack.canceled += instance.OnSpecialAttack;
        }

        private void UnregisterCallbacks(IAttackPlayerActions instance)
        {
            @DirectionAttackUp.started -= instance.OnDirectionAttackUp;
            @DirectionAttackUp.performed -= instance.OnDirectionAttackUp;
            @DirectionAttackUp.canceled -= instance.OnDirectionAttackUp;
            @DirectionAttackDown.started -= instance.OnDirectionAttackDown;
            @DirectionAttackDown.performed -= instance.OnDirectionAttackDown;
            @DirectionAttackDown.canceled -= instance.OnDirectionAttackDown;
            @DirectionAttackLeft.started -= instance.OnDirectionAttackLeft;
            @DirectionAttackLeft.performed -= instance.OnDirectionAttackLeft;
            @DirectionAttackLeft.canceled -= instance.OnDirectionAttackLeft;
            @DirectionAttackRight.started -= instance.OnDirectionAttackRight;
            @DirectionAttackRight.performed -= instance.OnDirectionAttackRight;
            @DirectionAttackRight.canceled -= instance.OnDirectionAttackRight;
            @SpecialAttack.started -= instance.OnSpecialAttack;
            @SpecialAttack.performed -= instance.OnSpecialAttack;
            @SpecialAttack.canceled -= instance.OnSpecialAttack;
        }

        public void RemoveCallbacks(IAttackPlayerActions instance)
        {
            if (m_Wrapper.m_AttackPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackPlayerActions @AttackPlayer => new AttackPlayerActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IAttackPlayerActions
    {
        void OnDirectionAttackUp(InputAction.CallbackContext context);
        void OnDirectionAttackDown(InputAction.CallbackContext context);
        void OnDirectionAttackLeft(InputAction.CallbackContext context);
        void OnDirectionAttackRight(InputAction.CallbackContext context);
        void OnSpecialAttack(InputAction.CallbackContext context);
    }
}
